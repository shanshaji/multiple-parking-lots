continue
@parking_lots
@current_parking_lot
continue
@current_parking_lot
@park KA-01-HH-9999 White
continue
@current_parking_lot
exit
@parking_lots
current_parking_lot = @parking_lots.min_by {|lot| (lot.slots.map{|slot| slot.vehicle}.compact.count.to_f / lot.slots.count.to_f )*100 }
current_parking_lot
continue
current_parking_lot = @parking_lots.min_by {|lot| (lot.slots.map{|slot| slot.vehicle}.compact.count.to_f / lot.slots.count.to_f )*100 }
continue
@parking_lots.min_by {|lot| (lot.slots.map{|slot| slot.vehicle}.compact.count.to_f / lot.slots.count.to_f )*100 }
lot
(lot.slots.map{|slot| slot.vehicle}.compact.count.to_f / lot.slots.count.to_f )*100
lot.slots.select{|slot| slot.vehicle==nil}.count
lot.slots.select{|slot| slot.vehicle==nil}
lot.slots.select{|slot| slot.vehicle==nil}.compact.count.to_f
lot.slots.map{|slot| slot.vehicle}.compact.count.to_f
lot = @parking_lots.first
0/10
lot.slots.count.to_f
lot.slots.map{|slot| slot.vehicle}.compact.count.to_f
lot = @parking_lots.last
@parking_lots
current_parking_lot = @parking_lots.max_by {|lot| (lot.slots.map{|slot| slot.vehicle}.compact.count.to_f / lot.slots.count.to_f )*100 }
current_parking_lot = @parking_lots.min_by {|lot| (lot.slots.map{|slot| slot.vehicle}.compact.count.to_f / lot.slots.count.to_f )*100 }
continue
current_parking_lot = @parking_lots.min_by {|lot| (lot.slots.map{|slot| slot.vehicle}.compact.count.to_f / lot.slots.count.to_f )*100 }
continue
exit
current_parking_lot = @parking_lots.min_by {|lot| (lot.slots.count - lot.slots.map{|slot| slot.vehicle}.compact.count)/lot.slots.count*100 }
continue
current_parking_lot = @parking_lots.min_by {|lot| (lot.slots.map{|slot| slot.vehicle}.compact.count.to_f / lot.slots.count.to_f )*100 }
(5/6.0) * 100
5/6.0
5/6.to_f
5/6
600/400
600/500
600/5*100
600/5
(6-1)/6*100
lot.slots.map{ |slot| slot.vehicle}.compact.count
lot.slots.map{ |slot| slot.vehicle}.compact
lot.slots.map{ |slot| slot.vehicle}
lot.slots.map{ |slot| slot.vehicle|
lot.slots.count
lot = @parking_lots[0]
lot.slots.count
current_parking_lot = @parking_lots.min_by {|lot| (lot.slots.count - lot.slots.map{|slot| slot.vehicle}.compact.count)/lot.slots.count*100 }
continue
6 / 600
lot.slots.map{|slot| slot.vehicle}.compact.count
lot.slots.count
lot = @parking_lots[0]
lot = @parking_lot
lot = @parking_lot[0]
current_parking_lot = @parking_lots.max_by {|lot| (lot.slots.count - lot.slots.map{|slot| slot.vehicle}.compact.count)/lot.slots.count*100 }
current_parking_lot = @parking_lots.min_by {|lot| (lot.slots.count - lot.slots.map{|slot| slot.vehicle}.compact.count)/lot.slots.count*100 }
continue
lot.slots.map{|slot| slot.vehicle}.compact.count
lot.slots.map{|slot| slot.vehicle}.compact
lot.slots.map{|slot| slot.vehicle}
lot.slots.map{|slot| slot.vehicle == nil}
lot.slots.map{|slot| slot.free?}.reject(true)
lot.slots.map{|slot| slot.free?}.reject(:true)
lot.slots.map{|slot| slot.free?}.compact
lot.slots.map{|slot| slot == nil}.count
lot.slots.map{|slot| slot == nil}
lot.slots.map{|slot| slot.free? ? }
lot.slots.map{|slot| if slot.free?}
lot.slots.map{|slot| slot.free?}
lot.slots.each do |slot| slot.free? end.count
lot.slots.each do |slot| slot.free? end
lot.slots.count 
lot.slots
lot
lot.slots.count - lot.slots.each do | slot| slot.free? end
(lot.slots.count - lot.slots.each do | slot| slot.free? end)
(lot.slots.count - lot.slots.each do | slot| slot.free? end
lot = @parking_lots[0]
@parking_lots.min_by { |lot| (lot.slots.count - lot.slots.each do | slot| slot.free? end.length)}
@parking_lots.first
@parking_lots
continue
@parking_lots.min_by {|lot| (lot.slots.count - lot.slots.each do | slot| slot.free? end.length)/lot.slots.count*100 }
continue
current_parking_lot = @parking_lots.min_by {|lot| (lot.slots.count - lot.slots.each do | slot| slot.free? end.length)/lot.slots.count*100 }
continue
current_parking_lot = @parking_lots.min_by {|lot| (lot.slots.count - lot.slots.each do | slot| slot.free? end.length)/lot.slots.count*100 }
current_parking_lot = @parking_lots.min_by {|lot| (lot.slots.count - @parking_lots[1].slots.each do | slot| slot.free? end.length)/lot.slots.count*100 }
@parking_lots[1].slots.each do | slot| slot.free? end.length
@parking_lots[1].slots.each do | slot| slot.free? end
@parking_lots[1].slots.free
@parking_lots[1].status.count
@parking_lots[1].status
@parking_lots[1].slots.count
@parking_lots[1].slots
@parking_lots[1]
@parking_lots.min_by {|lot| (lot.slots.count/lot.status.count)*100 }
continue
@latest_parking_lot.length
@latest_parking_lot
Dispatcher.new(@latest_parking_lot, @rule).dispatch
@current_parking_lot
continue
@current_parking_lot
exit
current_parking_lot[0]
current_parking_lot[1]
current_parking_lot[2]
current_parking_lot.length
current_parking_lot.
current_parking_lot.classs
current_parking_lot
exit
current_parking_lot.class
current_parking_lot
exit
lot.status.length
lot.status
lot.methods
lot.slots.count
lot.slots
lot.slot
lot
exit
input.gsub("\\n","\n")
input
input.chomp
input.chop
input.methods
input.gsub("\")
input
exit
input
continue
input
continue
input.split("\n")
input = "create_parking_lot 6\npark KA-01-HH-1234 White"
input.split("\n")
input
exit
input
continue
input.split("\n")
input.split("\n"
input
exit
input
exit
input
exit
create_parking_lot 6/npark KA-01-HH-1234 White
exit
input.split("/n")
input.split("/n"
input
